package main

import (
	"fmt"
	"os"

	"github.com/privacy-scaling-explorations/maci-coordinator/src"
)

var sqlPassword string = os.Getenv("SQL_PASSWORD")
var sqlUser string = os.Getenv("SQL_USER")
var dbName string = os.Getenv("DB_NAME")

func main() {
	// These functions demonstrate two separate checks to detect if the code is being
	// run inside a docker container in debug mode, or production mode!
	
	// Note: Valid only for docker containers generated using the Makefile command
	firstCheck()
	secondCheck()

	// 
	adminJWT, err := src.CreateJWT("admin", "admin")
	if err != nil {
		panic("Failed to create admin JWT")
	}

	// @note only for testing purposes
	// to be refactored with a middleware for auth or other methods 
	// of protecting the admin routes
	fmt.Println("Admin JWT: " + adminJWT)

	// create prover object
	prover := src.Prover{}
	// init the db
	prover.InitDb(sqlUser, sqlPassword, dbName)
	// create a new router
	r := src.NewRouter(prover)

	certFile := "demo/server.crt"
	keyFile := "demo/server.key"

	// Listen and serve with TLS
	if err := r.RunTLS("localhost:8080", certFile, keyFile); err != nil {
		panic("Failed to run API server")
	}

	// make sure to close the DB connection
	defer prover.CloseDB()
}

func firstCheck() bool {
	/*
	 * The `debug_mode` environment variable exists only in debug builds, likewise,
	 * `production_mode` variable exists selectively in production builds - use the
	 * existence of these variables to detect container build type (and not values)
	 *
	 * Exactly one of these - `production_mode` or `debug_mode` - is **guaranteed** to
	 * exist for docker builds generated using the Makefile commands!
	 */

	if _, ok := os.LookupEnv("production_mode"); ok {
		fmt.Println("(Check 01): Running in `production` mode!")
		return true
	} else if _, ok := os.LookupEnv("debug_mode"); ok {
		// Could also use a simple `else` statement (above) for docker builds!
		fmt.Println("(Check 01): Running in `debug` mode!")
		return true
	} else {
		fmt.Println("\nP.S. Try running a build generated with the Makefile :)")
		return false
	}
}

func secondCheck() bool {
	/*
	 * There's also a central `__BUILD_MODE__` variable for a dirty checks -- guaranteed
	 * to exist for docker containers generated by the Makefile commands!
	 * The variable will have a value of `production` or `debug` (no capitalization)
	 *
	 * Note: Relates to docker builds generated using the Makefile
	 */

	value := os.Getenv("__BUILD_MODE__")

	// Yes, this if/else could have been written better
	switch value {
	case "production":
		fmt.Println("(Check 02): Running in `production` mode!")
		return true

	case "debug":
		fmt.Println("(Check 02): Running in `debug` mode!")
		return true

	default:
		// Flow ends up here for non-docker builds, or docker builds generated directly
		fmt.Println("Non-makefile build detected :(")
		return false
	}
}
