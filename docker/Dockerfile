# Dockerfile to generate docker image - the base docker image will copy the contents
# from the project root to docker container and generate a binary from it.
#
# Uses multi-stage build to reduce the size of docker image. The second image will use
# the binary generated by the first image


# Can optionally use the Alpine Go image as the base - in general, images built on
# Apline are slimmer, but the variant is not officially support and is highly
# experimental - checkout https://github.com/golang/go/issues/19938 for details.
# Uncomment the line below to switch to the Alpine image as base (and comment the
# out the current base)
#
#           FROM golang:1.18-alpine as builder
FROM --platform=linux/amd64 ubuntu:20.04

# Setup environmet variables - chores.
ENV GO111MODULE=on \
    CGO_ENABLED=1 \
    GOOS=linux \
    GOARCH=amd64

# Create a build directory if one does not exist, and use it as the work directory
WORKDIR "/src/__maci-coordinator__"


RUN apt-get update
RUN apt-get install -y wget build-essential ca-certificates
RUN wget https://go.dev/dl/go1.20.3.linux-amd64.tar.gz

# Configure Go
ENV GOROOT /usr/local/go
ENV GOPATH /go
ENV PATH /usr/local/go/bin:/go/bin:$PATH
ENV GOBIN /service/bin

RUN tar -xvf go1.20.3.linux-amd64.tar.gz
RUN mv go /usr/local

# Selectively copy the requirements into the image - using `*go.sum` prevents failure
# if the file does not exist!
COPY go.mod *go.sum ./

# Fetch all requirements and install them
RUN go mod download

# Copy remaining project files
COPY . .

# Generate a binary -- custom name to avoid collisions with existing files/directories
# `-tags rapidsnark_asm` enables performance optimazation on x86_64 hardware (See https://github.com/iden3/go-rapidsnark/tree/main/prover#performance-optimization-on-x86_64-hardware)
RUN go build -tags rapidsnark_asm -ldflags="-s -w" -trimpath -v -o "/builds/maci-coordinator"



WORKDIR "/builds"

# Set environment variables to distuinguish between build modes
ARG build_mode=production
ENV __BUILD_MODE__=${build_mode}
ENV ${build_mode}_mode=${build_mode}
# ^^ will be `debug_mode` or `production_mode`

# Copy demo webPage
COPY "./demo" \
    "./demo"

# Copy instruments needed to generate proof
# Before building the image, you'll need to prepare these files
COPY "./instruments/ProcessMessages_6-8-2-3_test.0.zkey" \
    "./instruments/ProcessMessages_6-8-2-3_test.0.zkey"

COPY "./instruments/ProcessMessages_6-8-2-3_test.wasm" \
    "./instruments/ProcessMessages_6-8-2-3_test.wasm"

COPY "./instruments/TallyVotes_6-2-3_test.0.zkey" \
    "./instruments/TallyVotes_6-2-3_test.0.zkey"

COPY "./instruments/TallyVotes_6-2-3_test.wasm" \
    "./instruments/TallyVotes_6-2-3_test.wasm"

RUN mkdir -p /builds/data/ProcessMessages/6-8-2-3
RUN mkdir -p /builds/data/TallyVotes/6-2-3

# Run the binary
CMD ["./maci-coordinator"]
