

import { Button, Text, VStack } from '@chakra-ui/react';
import React, { useState, useEffect } from 'react';
import { useApi } from '../../context/ApiContext';

import { ConnectButton } from '@rainbow-me/rainbowkit';

import { useContractRead } from 'wagmi';
import { encodeFunctionData } from 'viem';

import {Contract, providers } from 'ethers';


import { verifierContractABI } from './verifierContractABI';
import { vkArray, processVkAsContractParams } from './vks';

// TODO: sanity check in offchain side, make sure the proof is correct
// hardhat environment + hardhat task
// pre-requisite: circuit inputs....
// proving server: maci-coordinator service (local)
// output: proofs, public input

// * snanity check: verify proof is correct using someting like snarkjs or ??

// onchain verification
// input: proof, public input, vk(?)




// SnarkProof
// formatProofForVerifierContract


// import { VerifyingKey } from 'maci-domainobjs'

const myProof = [
	"20776610477887446815273078353492765146630950893754290483106965963129184484201",
	"20361705172705744303670075571916655888523410733801205089874915044387567682743",
	"17389678848279063996173375881166939098239202813854548829882014432716092398334",
	"17426197184151128999906962307999891337688037397387297609583638954535393586735",
	"18815443775003060680231326273871977473225534307022727513514139122135612426509",
	"1013820286085527856549788085986156916790548419305218446388370822384113344741",
	"16682165190010025012222900500298529354050778179356771675155890688392737175543",
	"20538042432207684220272328471113780649647617726850422541845213393797044820505",
  ]

const myPublicInput = [
	"14704409631080902356035237930411403039120445656715690267916296226703866308707"
]

// const processVk: VerifyingKey = VerifyingKey.fromJSON(vkObj)

const processVk = vkArray

// WIll make a hooks using WAGMI for verifier contract
// https://wagmi.sh/react/typescript
// https://wagmi.sh/react/hooks/useContractWrite
// https://wagmi.sh/react/hooks/useContractRead
// SubmitPage will call verifier contract of Ethereum
const SubmitPage: React.FC<React.PropsWithChildren<{}>> = () => {


	console.log("------trying to generate correct calldata of verifier contract-----")
	const data = encodeFunctionData({
		abi: verifierContractABI,
		functionName: 'verify',
		args: [myProof, processVk, myPublicInput],
	});

	console.log("call data generated by viem utility: ", data)



	console.log("------SubmitPage mounted-----")
	// it hooks into the context(state variables)
	const { proofs, proverStateProcessMessages } = useApi();
	const verifierContractAddress = "0x855d1c79Ad3fb086D516554Dc7187E3Fdfc1C79a"


	// const [verifyProofData, setVerifyProofData] = useState<any>(null);
	const [verifyProofError, setVerifyProofError] = useState<any>(null);
	const [verifyProofLoading, setVerifyProofLoading] = useState(false);

	// console.log("myProof", myProof);
	// console.log("processVk", processVk);
	// console.log("myPublicInput", myPublicInput);
	// console.log("Verify proof onchain");
	// useContractRead({
	// 	address: verifierContractAddress,
	// 	abi: verifierContractABI,
	// 	functionName: 'verify',
	// 	args: [myProof, processVk, myPublicInput],
	// 	onSuccess: (data) => {
	// 		// setVerifyProofData(data);
	// 		setVerifyProofLoading(false);

	// 		console.log("------verify result-----")
	// 		console.log("------verify result-----")
	// 		console.log("hi: ", data)
	// 	},
	// 	onError: (error) => {
	// 		setVerifyProofError(error);
	// 		setVerifyProofLoading(false);

	// 		console.log("verifyProofError", verifyProofError);
	// 		console.log("verifyProofLoading", verifyProofLoading);
	// 	},
	// });

	// Use ethers.js instead of WAGMI for verify proof generation


	// get latest block using JSON-RPC curl
	// curl -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' http://localhost:8545



	// v6.7 got error: wrong array length

	useEffect(() => {
		console.log('SubmitPage useEffect');
		const useEthersJS = async () => {
			console.log("useEthersJS called");

			const provider = new providers.JsonRpcProvider('http://localhost:8545')
			await provider.getBlockNumber().then((result) => {
				console.log("result", result)
			}
			).catch((err) => {
				console.log("err", err)
			}
			)

			const verifierContract = new Contract(verifierContractAddress, verifierContractABI, provider)
			await verifierContract.verify(myProof, processVkAsContractParams, myPublicInput[0].toString())
				.then((result) => {
					console.log("result", result)
				}
				).catch((err) => {
					console.log("err", err)
				})

		// 	await provider.call({
		// 		to: verifierContractAddress,
		// 		data: "0x22b72c942def2511c00b09cda8c4de258ad8a2f934e3bfcf7dd414869ddd814066727b692d045114a69d7860c5cdeb3eec34900bf52d0eba33cf3906f34c4b72b0b7c4b72672359d6cd70fd05231626b9e76349887b4479ab64dd46a847cfecf0a7cdafe2686e0c9c9136052d39174a0c7791c212518189bb0087aafdf297a964e1e6e2f299929edc81378121f67615426e07e55e186d5f98ac389aeac94a7787dfa890d023dcd4c688cfb54c8502eba3ecdd556db8ac3d0e037a77c37f1341c3026e0e524e1c5594bb2322a1b5c0aac7b73ead5a406b03e677376a5e7dfc98d6315b7f72d681ebd20514210ec0748b4a263e1475ec03d6d928f2ff61fbdc1fb5154da190000000000000000000000000000000000000000000000000000000000000140208266a27554e0facc5b0eb57cc2f26e87e7a98d7f57d1df851f550e2d9fa8632d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e214bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19260e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a71800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c212c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b096a174fc88ed3fa92f00c0c68ffe0a59453adfb829ceefe110cfc2b52d419f32cfed48b3ddcc7e2a5d73ab26f0094d1b265c89b572fc2bdbf490e6c32dbe1db2cfed48b3ddcc7e2a5d73ab26f0094d1b265c89b572fc2bdbf490e6c32dbe1db2d92935a4d9689130c5d0f71597ead40dd2501ba384b84a3521e872560b30e9700000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002096a174fc88ed3fa92f00c0c68ffe0a59453adfb829ceefe110cfc2b52d419f32cfed48b3ddcc7e2a5d73ab26f0094d1b265c89b572fc2bdbf490e6c32dbe1db2cfed48b3ddcc7e2a5d73ab26f0094d1b265c89b572fc2bdbf490e6c32dbe1db2d92935a4d9689130c5d0f71597ead40dd2501ba384b84a3521e872560b30e97"
		// 	}).then((result) => {
		// 		console.log("result", result)
		// 	}
		// 	).catch((err) => {
		// 		console.log("err", err)
		// 	}
		// 	)
		// }
		}

		useEthersJS();
	}, []);



	const handleClick = () => {
		// setVerifyProofLoading(true);


	};




	return (
		<VStack>
			<Text>prover status: {proverStateProcessMessages}</Text>

			<ConnectButton />;

			<Button onClick={handleClick}>VerifyProof</Button>
			<>
				{/* display current prover status */}
				<div>prover status: {proverStateProcessMessages}</div>
				{/* render all vars */}
				<div>proofs: {JSON.stringify(proofs, null, 2)}</div>
			</>
		</VStack>

	);
}




export { SubmitPage };
